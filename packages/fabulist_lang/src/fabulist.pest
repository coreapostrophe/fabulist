// SILENT RULES
WHITESPACE = _{ " " | "\n" }

// KEYWORDS
true_keyword  = _{ "true" }
false_keyword = _{ "false" }
none_keyword  = _{ "none" }
keyword       = _{ true_keyword | false_keyword | none_keyword }

// PRIMITIVE VALUE
string_interior = ${ (!("\"") ~ ANY)* }
string          = ${ "\"" ~ string_interior ~ "\"" }
number          = ${ ASCII_DIGIT+ }
boolean         = ${ true_keyword | false_keyword }
none            = ${ none_keyword }
identifier      = ${ !keyword ~ "_"? ~ ASCII_ALPHA+ ~ (ASCII_ALPHANUMERIC | "_")* }

// OPERATORS
unary_operator      = { "!" | "-" }
factor_operator     = { "/" | "*" }
term_operator       = { "-" | "+" }
comparison_operator = { ">=" | "<=" | ">" | "<" }
equality_operator   = { "!=" | "==" }
logical_operator    = { "&&" | "||" }

// DEFINITIONS
parameters      = { identifier ~ ("," ~ identifier)* }
arguments       = { expression ~ ("," ~ expression)* }
object_interior = { string ~ ":" ~ expression ~ ("," ~ string ~ ":" ~ expression)* }
object          = { "{" ~ object_interior? ~ "}" }
statement_body  = { "{" ~ action_statement* ~ "}" }
grouping        = { "(" ~ expression ~ ")" }
argument_body   = { "(" ~ arguments* ~ ")" }
parameter_body  = { "(" ~ parameters* ~ ")" }
lambda_function = { parameter_body ~ "=>" ~ statement_body }

// ELEMENT DEFINITIONS
character = { "[" ~ identifier ~ "]" }
id        = { "#" ~ string ~ ("=>" ~ object)? }
quote     = { "-" ~ string ~ ("=>" ~ object)? }
dialogue  = { ">" ~ string ~ quote* }
monologue = { character ~ dialogue+ }

// EXPRESSIONS
primary    = _{ string | number | boolean | lambda_function | grouping | none | identifier | object }
call       =  { #callee = primary ~ argument_body* }
unary      =  { (#operator = unary_operator ~ #right = unary) | call }
factor     =  { #left = unary ~ (#operator = factor_operator ~ #right = unary)* }
term       =  { #left = factor ~ (#operator = term_operator ~ #right = factor)* }
comparison =  { #left = term ~ (#operator = comparison_operator ~ #right = term)* }
equality   =  { #left = comparison ~ (#operator = equality_operator ~ #right = comparison)* }
logical    =  { #left = equality ~ (#operator = logical_operator ~ #right = equality)* }
assignment =  { (#name = identifier ~ "=" ~ #value = logical) | logical }
expression =  { assignment }

// STATEMENTS
expression_statement =  { expression ~ ";" }
action_statement     = _{ expression_statement }
node_statement       =  { id ~ monologue* }
statement            =  { node_statement }

fabulist = { SOI ~ statement* ~ EOI }

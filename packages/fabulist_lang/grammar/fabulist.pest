// SILENT RULES
WHITESPACE = _{ " " | "\n" }

// KEYWORDS
true_keyword  = _{ "true" }
false_keyword = _{ "false" }
none_keyword  = _{ "none" }
meta_keyword  = _{ "story" }
from_keyword  = _{ "from" }
set_keyword   = _{ "set" }
let_keyword   = _{ "let" }
get_keyword   = _{ "get" }
if_keyword    = _{ "if" }
else_keyword  = _{ "else" }
mod_keyword   = _{ "module" }
as_keyword    = _{ "as" }
goto_keyword  = _{ "goto" }
keyword       = _{
    true_keyword
  | false_keyword
  | none_keyword
  | meta_keyword
  | from_keyword
  | set_keyword
  | let_keyword
  | get_keyword
  | if_keyword
  | else_keyword
  | mod_keyword
  | as_keyword
  | goto_keyword
}

// PRIMITIVE VALUE
string_interior     = ${ (!("\"") ~ ANY)* }
string              = ${ "\"" ~ string_interior ~ "\"" }
raw_string_interior = ${ (!("\"" ~ PEEK) ~ ANY)* }
raw_string          = ${ "r" ~ PUSH("#"*) ~ "\"" ~ raw_string_interior ~ "\"" ~ POP }
number              = ${ ASCII_DIGIT+ }
boolean             = ${ true_keyword | false_keyword }
none                = ${ none_keyword }

// OPERATORS
unary_operator      = { "!" | "-" }
factor_operator     = { "/" | "*" }
term_operator       = { "-" | "+" }
comparison_operator = { ">=" | "<=" | ">" | "<" }
equality_operator   = { "!=" | "==" }
logical_operator    = { "&&" | "||" }

// DEFINITIONS
raw_identifier_interior = ${ "_"? ~ ASCII_ALPHA+ ~ (ASCII_ALPHANUMERIC | "_")* }
raw_identifier          = ${ "r#" ~ raw_identifier_interior }
identifier              = ${ !keyword ~ "_"? ~ ASCII_ALPHA+ ~ (ASCII_ALPHANUMERIC | "_")* }
list_interior           =  { expression ~ ("," ~ expression)* }
list                    =  { "[" ~ list_interior? ~ "]" }
object_interior         =  { string ~ ":" ~ expression ~ ("," ~ string ~ ":" ~ expression)* }
object                  =  { "{" ~ object_interior? ~ "}" }
grouping                =  { "(" ~ expression ~ ")" }
mutator                 =  { "|>" ~ block_stmt }
arguments               =  { expression ~ ("," ~ expression)* }
argument_body           =  { "(" ~ arguments? ~ ")" }
get                     =  { get_keyword ~ "(" ~ identifier ~ ")" }

// EXPRESSIONS
primary_expr    = _{
    raw_string
  | get
  | string
  | number
  | boolean
  | grouping
  | none
  | raw_identifier
  | identifier
  | object
  | list
  | mutator
}
call_expr       =  { #callee = primary_expr ~ argument_body* }
member_expr     =  { #left = call_expr ~ ("." ~ member_expr)* }
unary_expr      =  { (#operator = unary_operator ~ #right = unary_expr) | member_expr }
factor_expr     =  { #left = unary_expr ~ (#operator = factor_operator ~ #right = unary_expr)* }
term_expr       =  { #left = factor_expr ~ (#operator = term_operator ~ #right = factor_expr)* }
comparison_expr =  { #left = term_expr ~ (#operator = comparison_operator ~ #right = term_expr)* }
equality_expr   =  { #left = comparison_expr ~ (#operator = equality_operator ~ #right = comparison_expr)* }
logical_expr    =  { #left = equality_expr ~ (#operator = logical_operator ~ #right = equality_expr)* }
expression      =  { logical_expr }

// DECLARATIONS
character_decl = { "[" ~ #name = identifier ~ "]" }
id_decl        = { "#" ~ #name = identifier }
choice_decl    = { "-" ~ #text = string ~ ("=>" ~ object)? }
narration_decl = { "*" ~ #text = string ~ ("=>" ~ object)? }
quote_decl     = { ">" ~ #text = string ~ ("=>" ~ object)? }
dialogue_decl  = { #character = character_decl ~ quote_decl+ }
element_decl   = { dialogue_decl | choice_decl | narration_decl }

// SEQUENCE STATEMENT
block_stmt   = { "{" ~ mutator_stmt* ~ "}" }
set_stmt     = { set_keyword ~ identifier ~ "=" ~ expression ~ ";" }
let_stmt     = { let_keyword ~ identifier ~ "=" ~ expression ~ ";" }
goto_stmt    = { goto_keyword ~ identifier }
else_stmt    = { else_keyword ~ (if_stmt | block_stmt) }
if_stmt      = { if_keyword ~ #condition = expression ~ block_stmt ~ else_stmt? }
mutator_stmt = { block_stmt | set_stmt | let_stmt | if_stmt | goto_stmt }

// STATEMENTS
mod_stmt  = { mod_keyword ~ #path = string ~ as_keyword ~ identifier ~ ";" }
part_stmt = { #id = id_decl ~ element_decl* }
meta_stmt = { meta_keyword ~ object }
statement = { part_stmt }

fabulist = { SOI ~ mod_stmt* ~ meta_stmt? ~ statement* ~ EOI }

// SILENT RULES
WHITESPACE = _{ " " | "\n" | "\t" }

// KEYWORDS
true_keyword    = _{ "true" }
false_keyword   = _{ "false" }
none_keyword    = _{ "none" }
meta_keyword    = _{ "story" }
from_keyword    = _{ "from" }
let_keyword     = _{ "let" }
get_keyword     = _{ "get" }
if_keyword      = _{ "if" }
else_keyword    = _{ "else" }
mod_keyword     = _{ "module" }
as_keyword      = _{ "as" }
goto_keyword    = _{ "goto" }
context_keyword = _{ "context" }
raw_keyword     = _{
    true_keyword
  | false_keyword
  | none_keyword
  | meta_keyword
  | from_keyword
  | context_keyword
  | let_keyword
  | get_keyword
  | if_keyword
  | else_keyword
  | mod_keyword
  | as_keyword
  | goto_keyword
}
keyword         = _{ raw_keyword ~ !ident_continue }

// LITERALS
string_interior     = ${ (!("\"") ~ ANY)* }
string              = ${ "\"" ~ string_interior ~ "\"" }
raw_string_interior = ${ (!("\"" ~ PEEK) ~ ANY)* }
raw_string          = ${ "r" ~ PUSH("#"*) ~ "\"" ~ raw_string_interior ~ "\"" ~ POP }
number              = ${ ASCII_DIGIT+ ~ ("." ~ ASCII_DIGIT)? }
boolean             = ${ true_keyword | false_keyword }
none                = ${ none_keyword }

// PRIMITIVES
ident_start     = _{ "_" | ASCII_ALPHA }
ident_continue  = _{ "_" | ASCII_ALPHANUMERIC }
ident_interior  = ${ ident_start ~ ident_continue* }
raw_ident       = ${ "r#" ~ ident_interior }
strict_ident    = ${ !keyword ~ ident_interior }
identifier      = ${ raw_ident | strict_ident }
path            = ${ identifier ~ ("::" ~ identifier)* }
list_interior   =  { expression ~ ("," ~ expression)* }
list            =  { "[" ~ list_interior? ~ "]" }
object_interior =  { string ~ ":" ~ expression ~ ("," ~ string ~ ":" ~ expression)* }
object          =  { "{" ~ object_interior? ~ "}" }
context         =  { context_keyword }
grouping        =  { "(" ~ expression ~ ")" }
lambda          =  { parameter_body ~ "=>" ~ block_stmt }

// OPERATORS
unary_operator      = { "!" | "-" }
factor_operator     = { "/" | "*" }
term_operator       = { "-" | "+" }
comparison_operator = { ">=" | "<=" | ">" | "<" }
equality_operator   = { "!=" | "==" }
logical_operator    = { "&&" | "||" }

// DEFINITIONS
arguments      = { expression ~ ("," ~ expression)* }
parameters     = { identifier ~ ("," ~ identifier)* }
parameter_body = { "(" ~ parameters? ~ ")" }
argument_body  = { "(" ~ arguments? ~ ")" }

// EXPRESSIONS
literal_expr    = { string | raw_string | number | boolean | none }
primitive_expr  = { list | object | identifier | path | context | grouping | lambda }
primary_expr    = { literal_expr | primitive_expr }
call_expr       = { #callee = primary_expr ~ argument_body* }
member_expr     = { #left = call_expr ~ ("." ~ call_expr)* }
unary_expr      = { (#operator = unary_operator ~ #right = unary_expr) | member_expr }
factor_expr     = { #left = unary_expr ~ (#operator = factor_operator ~ #right = unary_expr)* }
term_expr       = { #left = factor_expr ~ (#operator = term_operator ~ #right = factor_expr)* }
comparison_expr = { #left = term_expr ~ (#operator = comparison_operator ~ #right = term_expr)* }
equality_expr   = { #left = comparison_expr ~ (#operator = equality_operator ~ #right = comparison_expr)* }
logical_expr    = { #left = equality_expr ~ (#operator = logical_operator ~ #right = equality_expr)* }
expression      = { logical_expr }

// DECLARATIONS
character_decl = { "[" ~ #name = identifier ~ "]" }
id_decl        = { "#" ~ #name = identifier }
choice_decl    = { "-" ~ #text = string ~ ("=>" ~ object)? }
narration_decl = { "*" ~ #text = string ~ ("=>" ~ object)? }
quote_decl     = { ">" ~ #text = string ~ ("=>" ~ object)? }
dialogue_decl  = { #character = character_decl ~ quote_decl+ }
element_decl   = { dialogue_decl | choice_decl | narration_decl }
part_decl      = { #id = id_decl ~ element_decl* }
meta_decl      = { meta_keyword ~ object }
mod_decl       = { mod_keyword ~ #path = string ~ as_keyword ~ identifier ~ ";" }

// STATEMENT
block_stmt = { "{" ~ statement* ~ "}" }
let_stmt   = { let_keyword ~ identifier ~ "=" ~ #value = expression ~ ";" }
goto_stmt  = { goto_keyword ~ path ~ ";" }
else_stmt  = { else_keyword ~ (if_stmt | block_stmt) }
if_stmt    = { if_keyword ~ #condition = expression ~ block_stmt ~ else_stmt? }
statement  = { block_stmt | let_stmt | if_stmt | goto_stmt }

story = { SOI ~ mod_decl* ~ meta_decl? ~ part_decl* ~ EOI }
